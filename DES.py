# Conversion Maps
TEXT_TO_HEX = {
    '0':'30','1':'31','2':'32','3':'33','4':'34','5':'35',
    '6':'36','7':'37','8':'38','9':'39',' ':'20',
    'A':'41','B':'42','C':'43','D':'44','E':'45',
    'F':'46','G':'47','H':'48','I':'49','J':'4A',
    'K':'4B','L':'4C','M':'4D','N':'4E','O':'4F',
    'P':'50','Q':'51','R':'52','S':'53','T':'54',
    'U':'55','V':'56','W':'57','X':'58','Y':'59','Z':'5A'}


HEX_TO_TEXT = {
    '30': '0', '31': '1', '32': '2', '33': '3', '34': '4', '35': '5', 
    '36': '6', '37': '7', '38': '8', '39': '9', '20': ' ',
    '41': 'A', '42': 'B', '43': 'C', '44': 'D', '45': 'E', 
    '46': 'F', '47': 'G', '48': 'H', '49': 'I', '4A': 'J', 
    '4B': 'K', '4C': 'L', '4D': 'M', '4E': 'N', '4F': 'O', 
    '50': 'P', '51': 'Q', '52': 'R', '53': 'S', '54': 'T', 
    '55': 'U', '56': 'V', '57': 'W', '58': 'X', '59': 'Y', '5A': 'Z'
}

HEX_TO_BINARY = {
    '0' : "0000",'1' : "0001",'2' : "0010",'3' : "0011",
    '4' : "0100",'5' : "0101",'6' : "0110",'7' : "0111",
    '8' : "1000",'9' : "1001",'A' : "1010",'B' : "1011",
    'C' : "1100",'D' : "1101",'E' : "1110",'F' : "1111" }

BINARY_TO_HEX = {
    '0000': '0', '0001': '1', '0010': '2', '0011': '3', 
    '0100': '4', '0101': '5', '0110': '6', '0111': '7', 
    '1000': '8', '1001': '9', '1010': 'A', '1011': 'B', 
    '1100': 'C', '1101': 'D', '1110': 'E', '1111': 'F'}

BINARY_TO_DECIMAL = {
    '0000':0, '0001':1, '0010':2, '0011':3, '0100':4,
    '0101':5, '0110':6, '0111':7, '1000':8, '1001':9,
    '1010':10,'1011':11,'1100':12,'1101':13,'1110':14,'1111':15}


DECIMAL_TO_BINARY = {
    0: '0000', 1: '0001', 2: '0010', 3: '0011', 4: '0100', 
    5: '0101', 6: '0110', 7: '0111', 8: '1000', 9: '1001', 
    10: '1010', 11: '1011', 12: '1100', 13: '1101', 14: '1110', 15: '1111'}


# Valid key letters in hex
VALID_KEY_LETTERS = '0123456789ABCDEF'

#Values for the s and p boxes are taken from the textbook for accurate encryption and decryption

INITIAL_P_TABLE = [
                58, 50, 42, 34, 26, 18, 10, 2,
                60, 52, 44, 36, 28, 20, 12, 4,
                62, 54, 46, 38, 30, 22, 14, 6,
                64, 56, 48, 40, 32, 24, 16, 8,
                57, 49, 41, 33, 25, 17, 9, 1,
                59, 51, 43, 35, 27, 19, 11, 3,
                61, 53, 45, 37, 29, 21, 13, 5,
                63, 55, 47, 39, 31, 23, 15, 7]

FINAL_P_TABLE = [ 
                40, 8, 48, 16, 56, 24, 64, 32,
                39, 7, 47, 15, 55, 23, 63, 31,
                38, 6, 46, 14, 54, 22, 62, 30,
                37, 5, 45, 13, 53, 21, 61, 29,
                36, 4, 44, 12, 52, 20, 60, 28,
                35, 3, 43, 11, 51, 19, 59, 27,
                34, 2, 42, 10, 50, 18, 58, 26,
                33, 1, 41, 9, 49, 17, 57, 25]

EXPANSION_P_BOX = [
        32, 1 , 2 , 3 , 4 , 5 , 4 , 5,
        6 , 7 , 8 , 9 , 8 , 9 , 10, 11,
        12, 13, 12, 13, 14, 15, 16, 17,
        16, 17, 18, 19, 20, 21, 20, 21,
        22, 23, 24, 25, 24, 25, 26, 27,
        28, 29, 28, 29, 30, 31, 32, 1]

STRAIGHT_P_BOX = [
        16,  7, 20, 21, 29, 12, 28, 17,
        1,  15, 23, 26,  5, 18, 31, 10,
        2,   8, 24, 14, 32, 27,  3,  9,
        19, 13, 30,  6, 22, 11,  4, 25]

S_BOXES = [
        [],
        [],
        [],
        [],
        [],
        [],
        [],
        []]

roundKeys = []
SHIFT_TABLE = []


class InvalidDESKeyLengthException(Exception):
    def __init__(self, invalidLength : int):
        super().__init__(f'Invalid Key Length: {invalidLength}')

class InvalidDESKeyException(Exception):
    def __init__(self, invalidLetter : str):
        super().__init__(f'Invalid Key Letter {invalidLetter}')

# Number system conversion functions
def textToHex(text : str) -> str:
    hex = ''
    
    return hex

def checkKey(keyHEX : str):
    if len(keyHEX) != 14:
            raise InvalidDESKeyLengthException(len(keyHEX))
        
    for i in keyHEX:
        if i not in VALID_KEY_LETTERS:
            raise InvalidDESKeyException(i)

def encrypt(plain64):


    pass

def decrypt(cipher64):
    pass

def roundKeyGenerator(key56):
    pass